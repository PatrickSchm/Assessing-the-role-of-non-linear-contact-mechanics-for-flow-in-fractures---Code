/*D
	sample_session - gives a brief introduction into a whole session with ug3

	DESCRIPTION:
	In this session we will learn how to use an executable application. In order to do this you 
	you should have successfully compiled the UG library, the problem class library contained
	in /ug31/diff2d/pclib and the application in /ug31/diff2d/appl/diff2da.c. If not follow the installation procedure.

	EXAMPLE:
	As an example we solve the Laplace-equation
	on a circle with the boundary conditions:~
	
.n 	'u(x,y) = sin(2*PI*x) + cos(3*PI*y)' 
	
	Make the application directory /ug31/diff2d/appl your current directory and start the application by typing
	
.n	'>   diff2da   < return>'.
	
	The ug shell will appear. At the prompt of the window now type
	
.n	'>   ex circle.scr    <return>'.
	
	You should see a window where a grid is adaptively refined and a second window beneath showing a plot of the
	solution.
	
	To give you a deeper understanding of the program we will start from the beginning again and go on step by step to reproduce this
	result. We will not concentrate on the details of every command but on the basic structure of ug31.
	For more details, please see the manpages.
	
	First of all we have to leave the ug-shell again. At the prompt type

.n	'>   quit    <return>'

	and rerun the application by typing
	
.n	'>   diff2da    <return>'.

	The ug shell will appear again. To see the computational domain and the grid we first have to open a window. By typing
	
.n	'>   openwindow 10 100 320 320 $n Grid      <return>'

	a window appears with the name 'Grid'. The first two numbers are the coordinates of the lower left corner, the left two numbers
	 are the height and the length of the window. Inside this window you can open many pictures to plot different parameters.
	 We will open one picture by typing
	 
.n	'>   openpicture $s 10 10 300 300 $n grid    <return>'.

	The computational domain is a circle. The command:~ 
.n	'>   new circle $d circle $p circle problem $f full scalar $h 4000000     <return>'

	creates a new document consisting of the name of the document "circle", the name of the domain ("$d cicle") and  
	the name of the problem ("$p circle problem"). The type of the differential equation is described by the $f option, in 
	our example a scalar equation. The $h option describes the heapsize you want to allocate.
	
	By typing:~
.n	'>   refreshon     <return>'
.n	'>   setplotobject Grid $b 1 $n 1 $e 1 $c 1 $w a  <return>'
.n	'>   setview    <return>'
.n      '>   plot     <return>'

	you see the circle in your window. The 'refresh'-command updates the plot after each command you enter.  
		
	Now we insert 
	two nodes on the boundary (bn = boundary node) and one inside (in = inner node)) the domain. Please type
.n 	'>   in 0.0 0.0  <return>'
.n 	'>   bn 0 0.5    <return>'
.n	'>   bn 1 0.5	 <return>'.

	For inserting a inner node you have to specify the x- and y coordinates of the node. For a boundary node you have to specify 
	the id of the boundary segment and the value of a one-dimensional coordinate lying between 0 and 1.   

	You see five id-numbers although we only inserted three nodes. The left two nodes already exist since the circle is 
	composed of two halves and the two coincidence points describe two nodes. The nodes with the id-number 0,1,3,4  lie on the 
	boundary, the one with id-number 2 in the center of the circle. 

	The cells of the grid are created by combining  three nodes. To use the command "insert element" (ie) we have to add the
	id-numbers of the three nodes we want to combine.  The next steps to do are :~
	
.n	'>   ie 2 0 3    <return>'
.n	'>   ie 2 1 3    <return>'
.n 	'>   ie 2 1 4    <return>'
.n 	'>   ie 2 4 0    <return>'

	Now you see the four cells of the coarsest grid. This is the baselevel of our multigrid. We will go on now to solve the equation 
	for the example on this coarse grid. Then we will refine the coarse grid by applying an error estimator and solve the equation 
	on the finer grid. This process will be repeated until the error is small enough or a maximal level is reached. 
	
	But the first step is to solve the equation on the coarse grid. To solve we use multigrid (mgc) and as a smoother we use
	 Gauss-Seidel (gs). The details for the smoother and the solver are fixed in the struct smooth and the 
	 struct solve. To install the structs we have to use the command ms (=make struct). To change datas in the structs
	  we use the command cs (= change struct). The steps for solving are:~
	 
.n	'>   ms solve          <return>'
.n	'>   ms smooth         <return>'
.n	'>   ms est         	<return>'
.n	'>   cs :solve         <return>'
.n	'>   solver = "mgc"    <return>'
.n	'>   DIVLIMIT = 10.0   <return>'
.n	'>   cs :smooth        <return>'
.n	'>   smoother = "gs"   <return>'
.n	'>   assemble $a       <return>'
.n	'>   solve $d	       <return>'

	At the ug-shell you get the information that we used multigrid as solver and Gauss-seidel as smoother. In addition you see that the 
	linear iteration  stopped after two steps because the error was under the given limit. To plot the solution we have to open another
	window beside the old one:~ 
	
.n 	'>   openwindow 360 100 320 320 $n Solution      <return>'
.n	'>   openpicture $s 10 10 300 300 $n sol         <return>'
.n 	'>   setplotobject EScalar $e solution $d 0      <return>'
.n 	'>   setview         <return>'
.n 	'>   findrange $p    <return>'
.n	'>   plot            <return>'

	The solution is not very exiting since it is constant over the whole circle.
	Of course this grid is to coarse to get an exact solution. So we have to refine the grid. One possibility is to refine 
	uniformly. But as we want to reduce the complexity of the problem we want to refine adaptively. Therefore we need an indicator
	called error estimator to indicate which cell has to be refined and which not. In our example we use the value of the 
	residual as error estimator. When you type
	
.n	'>   cs :est    <return>'
.n	'>   estimator = "residual"     <return>'
.n	'>   tol = 8.0   <return>'
.n	'>   frac = 0.4   <return>'
.n	'>   estimate     <return>~~~~~Step 1'

	you get the information that the estimator indicated all four cells to be refined. Using the command 
	
.n	'>   refine     <return>~~~~~Step 2'

	you see the refined mesh in the Grid-window. Now the solution of the coarse grid has to be interpolated to the fine grid by
	
.n	'>   interpolate    <return>~~~~~  Step 3'

	On the fine grid we have to assemble again the stiffness matrix before we solve the equation:~
	
.n	'>   assemble $a  <return>~~~~~Step 4'
.n 	'>   solve $d   <return>~~~~~Step 5'

	As we are interested to compare the solution with the refined grid we have to plot the solution into the "Solution"-window:~
	
.n	'>   setplotobject EScalar $e solution $d 0   <return>~~~~~Step 6'
.n	'>   setview    <return>~~~~~Step 7'
.n	'>   findrange $p  <return>~~~~~Step 8'
.n	'>   plot  <return>~~~~~Step 9'

	The solution now is getting more coloured. The blue Colour describes minimum values, the green colour values around zero  and the 
	red maximum values. From analytical calculations we know that in center of the circle should be a maximum as we already find it in
	the plot of the solution. Therefore the grid refinement should mainly be located around the red quater in the center. By typing
	
.n	'>   estimate     <return>~~~~~Step 1'
.n	'>   refine     <return>~~~~~Step 2'

	we can observe that our suggestion was right. Only eight of the 16 elements were refined.
	To get a new solution on the fine grid we have to go on with Step 3 - 9.
	
	To observe continuely the relation between solution and adaptive grid refinement we have to execute Step 1 - 9 several times. 
	After having refined the grid nine times we get the same result as in the beginning of this session by executing the script
	'circle.scr'.
D*/
